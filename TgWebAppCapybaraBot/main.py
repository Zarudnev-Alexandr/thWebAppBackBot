from typing import Any

import requests
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode, ContentType
from aiogram.filters import CommandStart
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, User, CallbackQuery
from aiogram.utils.callback_answer import CallbackAnswerMiddleware
from aiogram_dialog import DialogManager, StartMode, setup_dialogs, Dialog, Window
from aiogram_dialog.widgets.input import TextInput, MessageInput, ManagedTextInput
from aiogram_dialog.widgets.kbd import Url, WebApp, Button, ScrollingGroup, Select, Back, Row, Next, Group
from aiogram_dialog.widgets.text import Const, Format
from environs import Env

env = Env()
env.read_env()

BOT_TOKEN = env('BOT_TOKEN')
API_URL = env('API_URL')

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()


class StartSG(StatesGroup):
    start = State()


class AllRequestsSG(StatesGroup):
    start = State()
    request_info = State()
    enter_nft = State()
    enter_link = State()
    accept = State()


async def get_user(event_from_user: User, dialog_manager: DialogManager, **kwargs):
    tg_id = event_from_user.id
    bot1 = dialog_manager.middleware_data['bot']
    user_channel_status = await bot1.get_chat_member(chat_id='@Harmonara', user_id=event_from_user.id)
    status = user_channel_status.status.__dict__
    if status['_value_'] not in ['creator', 'member']:
        return {'not_subscribe': True, 'username': event_from_user.username,}

    try:
        user_response = requests.get(f'{API_URL}users/{tg_id}')

        if user_response.status_code == 200:
            user_data = user_response.json()
        else:
            user_data = None

        if not user_data:
            return {'new_user': True, 'username': event_from_user.username}

        if user_data.get('is_admin'):
            return {'admin': True, 'username': event_from_user.username, }
        return {'new_user': True, 'username': event_from_user.username}

    except requests.RequestException as e:
        print(f"Error fetching user data: {e}")
        return {'error': 'Error fetching user data'}


async def get_requests(dialog_manager: DialogManager, **kwargs):
    try:
        all_requests_response = requests.get(f'{API_URL}users/all/requests')

        if all_requests_response.status_code == 200:
            all_requests_data = all_requests_response.json()
            print(all_requests_data)
        else:
            all_requests_data = None
        return {'all_requests_data': all_requests_data['requests']}

    except requests.RequestException as e:
        print(f"Error fetching user data: {e}")
        return {'error': 'Error fetching user data'}


async def get_request_info(event_from_user: User, dialog_manager: DialogManager, **kwargs):
    ctx = dialog_manager.current_context()
    request_id = int(ctx.dialog_data['selected_request_id'])

    user_response = requests.get(f'{API_URL}users/{request_id}')

    if user_response.status_code == 200:
        user_data = user_response.json()

        return {'username': user_data.get('username'),
                'fio': user_data.get('fio'),
                'wallet': user_data.get('wallet')}


async def del_request(callback: CallbackQuery,
                   button: Button,
                   dialog_manager: DialogManager):

    ctx = dialog_manager.current_context()
    request_id = int(ctx.dialog_data['selected_request_id'])

    requests.put(f'{API_URL}users/delete/request/{request_id}')

    ctx.dialog_data.update(selected_film_id='')
    await dialog_manager.back()


async def accept_nft_link(event_from_user: User, dialog_manager: DialogManager, **kwargs):
    ctx = dialog_manager.current_context()
    request_id = int(ctx.dialog_data['selected_request_id'])
    nft_shop_link = str(ctx.dialog_data['nft_shop_link'])
    nft_token = str(ctx.dialog_data['nft_token'])

    payload = {
        'tg_id': request_id,
        'link': nft_shop_link,
        'token': nft_token
    }

    try:
        response = requests.post(f'{API_URL}users/accept/nft', json=payload)

        if response.status_code == 200:
            user_data = response.json()
            ctx.dialog_data.update(selected_request_id='')
            ctx.dialog_data.update(nft_shop_link='')
            return {'nft_shop_link': user_data.get('nft_link'), 'nft_token': user_data.get('nft_token')}
        else:
            print(f"Error: {response.status_code} - {response.json().get('detail')}")

    except requests.RequestException as e:
        print(f"Error making POST request: {e}")


async def request_selection(
        callback: CallbackQuery,
        widget: Select,
        manager: DialogManager,
        item_id: str
):
    ctx = manager.current_context()
    ctx.dialog_data.update(selected_request_id=item_id)
    await manager.switch_to(AllRequestsSG.request_info)


async def switch_to_get_requests(
        callback: CallbackQuery,
        button: Button,
        dialog_manager: DialogManager
):
    await dialog_manager.done()
    await dialog_manager.start(state=AllRequestsSG.start)


async def switch_to_main_menu(
        callback: CallbackQuery,
        button: Button,
        dialog_manager: DialogManager
):
    await dialog_manager.done()
    await dialog_manager.start(state=StartSG.start)


async def no_text(message: Message, widget: MessageInput, dialog_manager: DialogManager):
    await message.answer(text='–í—ã –≤–≤–µ–ª–∏ –≤–æ–æ–±—â–µ –Ω–µ —Ç–µ–∫—Å—Ç!')


async def close_dialog(
        callback: CallbackQuery,
        button: Button,
        dialog_manager: DialogManager
):
    await dialog_manager.done()
    await dialog_manager.start(state=StartSG.start)


def name_check(text: Any) -> str:
    if 1 <= len(text) <= 250:
        return text
    raise ValueError


async def correct_film_name_handler(
        message: Message,
        widget: ManagedTextInput,
        dialog_manager: DialogManager,
        text: str) -> None:
    dialog_manager.dialog_data['nft_shop_link'] = text
    await dialog_manager.next()


async def correct_nft_name_handler(
        message: Message,
        widget: ManagedTextInput,
        dialog_manager: DialogManager,
        text: str) -> None:
    dialog_manager.dialog_data['nft_token'] = text
    await dialog_manager.next()


async def error_film_handler(
        message: Message,
        widget: ManagedTextInput,
        dialog_manager: DialogManager,
        error: ValueError):
    await message.answer(
        text='–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑'
    )


@dp.message(CommandStart())
async def command_start_process(message: Message, dialog_manager: DialogManager):
    await dialog_manager.start(state=StartSG.start, mode=StartMode.RESET_STACK)


start_dialog = Dialog(
    Window(
        # Format('–ü—Ä–∏–≤–µ—Ç, {username}!'),
        # Format('–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –Ω–∞—à–∏–º –±–æ—Ç–æ–º? –°–µ–π—á–∞—Å –∏—Å–ø—Ä–∞–≤–∏–º,\n –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É –∏ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç '
        #        '–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', when='new_user'),
        Format('–£ —Ç–µ–±—è –µ—Å—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞', when='admin'),
        # Format('C –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!', when='old_user'),
        Const('üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üåü\n\n'
              '–ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –∑–¥–µ—Å—å –∏ –ø—Ä–∏–≥–ª–∞—à–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É –º–∏—Ä—É –∏ '
              '–≥–∞—Ä–º–æ–Ω–∏–∏üåø.\n\n'
              '–í—ã —É–¥–∏–≤–∏—Ç–µ—Å—å —Ç–æ–º—É —á—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π\n\n'
              '–í—Å—ë, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ ‚Äî —ç—Ç–æ —É–¥–µ–ª—è—Ç—å 15 –º–∏–Ω—É—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –º–µ–¥–∏—Ç–∞—Ü–∏–∏, –∏ —Å –∫–∞–∂–¥—ã–º –¥–Ω–µ–º –≤—ã –±—É–¥–µ—Ç–µ –ø—Ä–∏–±–ª–∏–∂–∞—Ç—å—Å—è '
              '–∫ –Ω–æ–≤–æ–º—É —É—Ä–æ–≤–Ω—é —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏—è –∏ —É–º–∏—Ä–æ—Ç–≤–æ—Ä–µ–Ω–∏—è. üöÄ'
              '–í –∫–æ–Ω—Ü–µ –ø—É—Ç–∏ –≤–∞—Å –∂–¥–µ—Ç –æ—Å–æ–±—ã–π –ø–æ–¥–∞—Ä–æ–∫ ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω–∞—è NFT –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Harmonara üßò‚Äç‚ôÄÔ∏è,'
              ' –∫–æ—Ç–æ—Ä—É—é –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞ –ø–∞–º—è—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–∞—Ç—å. üéÅ\n\n'
              '–í–æ—Ç –∫–∞–∫ –Ω–∞—á–∞—Ç—å:\n\n'
              '1) –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –º–µ–¥–∏—Ç–∞—Ü–∏–∏" üïâ\n'
              '2) –ù–∞–π–¥–∏—Ç–µ —Å–∞–º—É—é —É—é—Ç–Ω—É—é –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—É—é –ø–æ–∑—É, —á—Ç–æ–±—ã –Ω–∏—á—Ç–æ –Ω–µ –º–µ—à–∞–ª–æ –≤–∞—à–µ–º—É –ø–æ–≥—Ä—É–∂–µ–Ω–∏—é. üõã\n'
              '3) –ù–µ–∂–Ω–æ –∫–æ—Å–Ω–∏—Ç–µ—Å—å —ç–∫—Ä–∞–Ω–∞ –∏ —É–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –ø–∞–ª–µ—Ü –Ω–∞ –Ω–µ–º. üì±\n'
              '4) –û—Ç–ø—É—Å—Ç–∏—Ç–µ –≤—Å–µ –º—ã—Å–ª–∏ –∏ –ø–æ–∑–≤–æ–ª—å—Ç–µ —Å–µ–±–µ –ø—Ä–æ—Å—Ç–æ —Å–ª—É—à–∞—Ç—å —Ä–∞—Å—Å–ª–∞–±–ª—è—é—â—É—é –º—É–∑—ã–∫—É. üé∂\n\n'
              '–ü—É—Å—Ç—å –≤–∞—à –ø—É—Ç—å –∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É –ø–æ–∫–æ—é –∏ –≥–∞—Ä–º–æ–Ω–∏–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! üßò‚Äç‚ôÇÔ∏èüßò‚Äç‚ôÄÔ∏è\n\n'
              'üôè –ñ–µ–ª–∞–µ–º –≤–∞–º –Ω–∞—Å–ª–∞–∂–¥–µ–Ω–∏—è –∏ —É–º–∏—Ä–æ—Ç–≤–æ—Ä–µ–Ω–∏—è –≤ –º–µ–¥–∏—Ç–∞—Ü–∏–∏! üôè', when='new_user'),
        Const('–¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª: https://t.me/fairytaleai\n –ü–æ–ø–∏—à–∏—Å—å, –∑–∞–Ω–æ–≤–æ –Ω–∞–∂–º–∏ /start, –∏ —Ç–æ–≥–¥–∞ —Å–º–æ–∂–µ—à—å '
              '–ø–æ–∏–≥—Ä–∞—Ç—å', when='not_subscribe'),
        Group(
            WebApp(Const('–ò–≥—Ä–∞—Ç—å'), Const('https://a97e-194-87-199-70.ngrok-free.app')),
            when='admin'
        ),
        Group(
            WebApp(Const('–ò–≥—Ä–∞—Ç—å'), Const('https://a97e-194-87-199-70.ngrok-free.app')),
            when='new_user'
        ),
        Button(Const('–ó–∞—è–≤–∫–∏'), id='zayavki', when='admin', on_click=switch_to_get_requests),
        getter=get_user,
        state=StartSG.start
    )
)

watch_all_requests_dialog = Dialog(
    Window(
        Const(text='–í—ã–±–µ—Ä–∏ –∑–∞—è–≤–∫—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:'),
        ScrollingGroup(
            Select(
                Format('{item[0]}'),
                id='zayavka',
                item_id_getter=lambda x: x[1],
                items='all_requests_data',
                on_click=request_selection,
            ),
            width=1,
            id='films_scrolling_group',
            height=6,
        ),
        Button(Const('üìÉ–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'), id='to_main_menu', on_click=switch_to_main_menu),
        state=AllRequestsSG.start,
        getter=get_requests
    ),
    Window(
        Format(text='–ó–∞—è–≤–∫–∞ –æ—Ç: <b>{fio}</b>\n'
                    '{username}\n\n'
                    '–ö–æ—à–µ–ª–µ–∫: {wallet}'),
        Row(
            Back(Const('‚óÄÔ∏è–Ω–∞–∑–∞–¥'), id='back2'),
            Next(Const('‚úÖ–û–¥–æ–±—Ä–∏—Ç—å –∑–∞—è–≤–∫—É'), id='accept_request'),
            Button(Const(text='‚ùå–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É'), id='del_request', on_click=del_request)
        ),
        getter=get_request_info,
        state=AllRequestsSG.request_info
    ),
    Window(
        Const(text='–í–≤–µ–¥–∏ nft'),
        TextInput(
            id='nft_input',
            type_factory=name_check,
            on_success=correct_nft_name_handler,
            on_error=error_film_handler,
        ),
        MessageInput(
            func=no_text,
            content_types=ContentType.ANY
        ),
        Button(Const('–û—Ç–º–µ–Ω–∞‚ùå'), id='button_cancel', on_click=close_dialog),
        state=AllRequestsSG.enter_nft,
    ),
    Window(
        Const(text='–í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω—Ñ—Ç –≤ –º–∞–≥–∞–∑–∏–Ω–µ'),
        TextInput(
            id='link_input',
            type_factory=name_check,
            on_success=correct_film_name_handler,
            on_error=error_film_handler,
        ),
        MessageInput(
            func=no_text,
            content_types=ContentType.ANY
        ),
        Button(Const('–û—Ç–º–µ–Ω–∞‚ùå'), id='button_cancel', on_click=close_dialog),
        state=AllRequestsSG.enter_link,
    ),
    Window(
        Format(text='–°—Å—ã–ª–∫–∞: {nft_shop_link}\n–¢–æ–∫–µ–Ω: {nft_token} –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞'),
        Button(Const('üìÉ–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'), id='to_main_menu', on_click=switch_to_main_menu),
        getter=accept_nft_link,
        state=AllRequestsSG.accept
    )
)

dp.include_router(start_dialog)
dp.include_router(watch_all_requests_dialog)
setup_dialogs(dp)


async def on_startup(bot):
    run_param = False
    # if run_param:
    #     await drop_db()
    #
    # await create_db()


async def on_shutdown(bot):
    print('–±–æ—Ç –ª–µ–≥')


dp.startup.register(on_startup)
dp.shutdown.register(on_shutdown)

# dp.update.middleware(DataBaseSession(session_pool=session_maker))
dp.callback_query.middleware(CallbackAnswerMiddleware())

dp.run_polling(bot)
